/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Test_H
#define Test_H

#include <TProcessor.h>
#include "uctest_types.h"

namespace uctest {

class TestIf {
 public:
  virtual ~TestIf() {}
  virtual void pingpong(std::string& _return, const std::string& data) = 0;
};

class TestNull : virtual public TestIf {
 public:
  virtual ~TestNull() {}
  void pingpong(std::string& /* _return */, const std::string& /* data */) {
    return;
  }
};

typedef struct _Test_pingpong_args__isset {
  _Test_pingpong_args__isset() : data(false) {}
  bool data;
} _Test_pingpong_args__isset;

class Test_pingpong_args {
 public:

  Test_pingpong_args() : data("") {
  }

  virtual ~Test_pingpong_args() throw() {}

  std::string data;

  _Test_pingpong_args__isset __isset;

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const Test_pingpong_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Test_pingpong_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_pingpong_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Test_pingpong_pargs {
 public:


  virtual ~Test_pingpong_pargs() throw() {}

  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Test_pingpong_result__isset {
  _Test_pingpong_result__isset() : success(false) {}
  bool success;
} _Test_pingpong_result__isset;

class Test_pingpong_result {
 public:

  Test_pingpong_result() : success("") {
  }

  virtual ~Test_pingpong_result() throw() {}

  std::string success;

  _Test_pingpong_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Test_pingpong_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Test_pingpong_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_pingpong_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Test_pingpong_presult__isset {
  _Test_pingpong_presult__isset() : success(false) {}
  bool success;
} _Test_pingpong_presult__isset;

class Test_pingpong_presult {
 public:


  virtual ~Test_pingpong_presult() throw() {}

  std::string* success;

  _Test_pingpong_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TestClient : virtual public TestIf {
 public:
  TestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pingpong(std::string& _return, const std::string& data);
  void send_pingpong(const std::string& data);
  void recv_pingpong(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<TestIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (TestProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_pingpong(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestProcessor(boost::shared_ptr<TestIf> iface) :
    iface_(iface) {
    processMap_["pingpong"] = &TestProcessor::process_pingpong;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~TestProcessor() {}
};

class TestMultiface : virtual public TestIf {
 public:
  TestMultiface(std::vector<boost::shared_ptr<TestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TestIf> > ifaces_;
  TestMultiface() {}
  void add(boost::shared_ptr<TestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void pingpong(std::string& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->pingpong(_return, data);
        return;
      } else {
        ifaces_[i]->pingpong(_return, data);
      }
    }
  }

};

} // namespace

#endif
