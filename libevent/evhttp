/*************************************************************************
 * @File Name: libevent.c
 * @Author: wangfan
 * @Mail: wangfan@mediav.com 
 * @Created Time: 2015年05月05日 星期二 16时01分29秒
 ************************************************************************/

#include <stdio.h>
#include <unistd.h>
#include <event.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

char* touppers(char* lpstr,int num)
{

  int i=0;
  char* p = lpstr;
  for(;i<num;++i)
  {

    p[i] = toupper(p[i]);
  }
  return lpstr;
}

void readcb(struct bufferevent *bev, void *ctx)
{

  struct evbuffer *input, *output;
  char *line;
  size_t nread,size,ret;
  char* buffer = NULL;

  input = bufferevent_get_input(bev); // input from buffer
  output = bufferevent_get_output(bev); // output to buffer
  size = evbuffer_get_length(input); // buffer length
  buffer = (char*)malloc(size+1);
  if(buffer == NULL)
    perror("malloc error");
  memset(buffer,0,size+1);
  nread = evbuffer_remove(input,buffer,size+1);
  printf("in data:%s\n",buffer);

  touppers(buffer,size);

  ret = evbuffer_add(output,buffer,size); // output to evbuffer
  if(ret == -1)
    perror("add data to buffer failed");
  free(buffer);
}

void do_accept(evutil_socket_t listener, short event, void *arg)
{

  struct event_base *base = arg;
  struct sockaddr_storage ss;
  socklen_t slen = sizeof(ss);
  int fd = accept(listener, (struct sockaddr*)&ss, &slen);
  if (fd < 0)
  {

    perror("accept");
  }
  else if (fd > FD_SETSIZE)
  {

    close(fd);
  }
  else
  {

    struct bufferevent *bev; // buffer event
    struct timeval newtime;
    evutil_gettimeofday(&newtime,NULL); // gettimeofday wrapper
    printf("----accept..%d\n",newtime);

    evutil_make_socket_nonblocking(fd);
    bev = bufferevent_socket_new(base, fd, 0);
    bufferevent_setcb(bev, readcb, NULL, NULL, NULL); //bufferevent_setcb --> readcb
    bufferevent_setwatermark(bev, EV_READ, 0, 0); // bufferevent_setwatermark
    bufferevent_enable(bev, EV_READ|EV_WRITE); //bufferevent_enable flag setting, read/write will trigger socket i/o
  }
}

int main()
{

  evutil_socket_t listener;
  struct sockaddr_in sin;
  struct event_base* base; // event_base --> event_base_new()
  struct event* listener_event; //event

  base = event_base_new();
  if(!base)
    return -2;
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = 0;
  sin.sin_port = htons(32000);

  listener = socket(AF_INET,SOCK_STREAM,0);
  evutil_make_socket_nonblocking(listener); // non-blocking ev

  if (bind(listener, (struct sockaddr*)&sin, sizeof(sin)) < 0)
  {

    perror("bind");
    return -2;
  }
  if (listen(listener, 32)<0) // backlog 32
  {

    perror("listen");
    return -2;
  }
  listener_event = event_new(base, listener, EV_READ | EV_PERSIST, do_accept, (void*)base); // listerner---(callback)---> do_accept
  event_add(listener_event, NULL); // event_new --> event --> event_add --> event_base_dispatch,begin to loop
  event_base_dispatch(base);

  return 0;
}
